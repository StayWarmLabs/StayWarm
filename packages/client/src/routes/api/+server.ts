import { error, json } from "@sveltejs/kit"
import { W3S_KEY } from '$env/static/private';
import { StoreMemory } from '@web3-storage/access/stores/store-memory'

const W3S_PROOF = "EaJlcm9vdHOAZ3ZlcnNpb24BwQUBcRIgJaUeBjHk2fLoeCaTd/OYpn42juG2mzy+Qav5kKXoFlioYXNYRO2hA0DCpK/PynwDnAANIsqpID3Zmmv+XZj1++ewNFPguinoZI2OEXISF7HtlmwdVlMK03186dVAoDofA15qCph8+NUJYXZlMC45LjFjYXR0hqJjY2FuZ3NwYWNlLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2NhbmdzdG9yZS8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5odXBsb2FkLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2NhbmhhY2Nlc3MvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuamZpbGVjb2luLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2Nhbmd1c2FnZS8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkY2F1ZFgi7QE0oBkcLrQuUryXIN+Hnx01VNPUU5kaVQBXPv8K2BaiS2NleHAaZzpdUmNmY3SBoWVzcGFjZaFkbmFtZWlzdGF5LXdhcm1jaXNzWCLtAWWOn6oRGRZpZZ8s+quCkNG6oVakxF0GODGCc8qgqzg0Y3ByZoDBBQFxEiAlpR4GMeTZ8uh4JpN385imfjaO4babPL5Bq/mQpegWWKhhc1hE7aEDQMKkr8/KfAOcAA0iyqkgPdmaa/5dmPX757A0U+C6KehkjY4RchIXse2WbB1WUwrTfXzp1UCgOh8DXmoKmHz41QlhdmUwLjkuMWNhdHSGomNjYW5nc3BhY2UvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuZ3N0b3JlLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2Nhbmh1cGxvYWQvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuaGFjY2Vzcy8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5qZmlsZWNvaW4vKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuZ3VzYWdlLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmRjYXVkWCLtATSgGRwutC5SvJcg34efHTVU09RTmRpVAFc+/wrYFqJLY2V4cBpnOl1SY2ZjdIGhZXNwYWNloWRuYW1laXN0YXktd2FybWNpc3NYIu0BZY6fqhEZFmllnyz6q4KQ0bqhVqTEXQY4MYJzyqCrODRjcHJmgMEFAXESICWlHgYx5Nny6Hgmk3fzmKZ+No7htps8vkGr+ZCl6BZYqGFzWETtoQNAwqSvz8p8A5wADSLKqSA92Zpr/l2Y9fvnsDRT4Lop6GSNjhFyEhex7ZZsHVZTCtN9fOnVQKA6HwNeagqYfPjVCWF2ZTAuOS4xY2F0dIaiY2NhbmdzcGFjZS8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5nc3RvcmUvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuaHVwbG9hZC8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5oYWNjZXNzLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2NhbmpmaWxlY29pbi8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5ndXNhZ2UvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZGNhdWRYIu0BNKAZHC60LlK8lyDfh58dNVTT1FOZGlUAVz7/CtgWoktjZXhwGmc6XVJjZmN0gaFlc3BhY2WhZG5hbWVpc3RheS13YXJtY2lzc1gi7QFljp+qERkWaWWfLPqrgpDRuqFWpMRdBjgxgnPKoKs4NGNwcmaAwQUBcRIgJaUeBjHk2fLoeCaTd/OYpn42juG2mzy+Qav5kKXoFlioYXNYRO2hA0DCpK/PynwDnAANIsqpID3Zmmv+XZj1++ewNFPguinoZI2OEXISF7HtlmwdVlMK03186dVAoDofA15qCph8+NUJYXZlMC45LjFjYXR0hqJjY2FuZ3NwYWNlLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2NhbmdzdG9yZS8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5odXBsb2FkLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2NhbmhhY2Nlc3MvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuamZpbGVjb2luLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2Nhbmd1c2FnZS8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkY2F1ZFgi7QE0oBkcLrQuUryXIN+Hnx01VNPUU5kaVQBXPv8K2BaiS2NleHAaZzpdUmNmY3SBoWVzcGFjZaFkbmFtZWlzdGF5LXdhcm1jaXNzWCLtAWWOn6oRGRZpZZ8s+quCkNG6oVakxF0GODGCc8qgqzg0Y3ByZoDBBQFxEiAlpR4GMeTZ8uh4JpN385imfjaO4babPL5Bq/mQpegWWKhhc1hE7aEDQMKkr8/KfAOcAA0iyqkgPdmaa/5dmPX757A0U+C6KehkjY4RchIXse2WbB1WUwrTfXzp1UCgOh8DXmoKmHz41QlhdmUwLjkuMWNhdHSGomNjYW5nc3BhY2UvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuZ3N0b3JlLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2Nhbmh1cGxvYWQvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuaGFjY2Vzcy8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5qZmlsZWNvaW4vKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuZ3VzYWdlLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmRjYXVkWCLtATSgGRwutC5SvJcg34efHTVU09RTmRpVAFc+/wrYFqJLY2V4cBpnOl1SY2ZjdIGhZXNwYWNloWRuYW1laXN0YXktd2FybWNpc3NYIu0BZY6fqhEZFmllnyz6q4KQ0bqhVqTEXQY4MYJzyqCrODRjcHJmgMEFAXESICWlHgYx5Nny6Hgmk3fzmKZ+No7htps8vkGr+ZCl6BZYqGFzWETtoQNAwqSvz8p8A5wADSLKqSA92Zpr/l2Y9fvnsDRT4Lop6GSNjhFyEhex7ZZsHVZTCtN9fOnVQKA6HwNeagqYfPjVCWF2ZTAuOS4xY2F0dIaiY2NhbmdzcGFjZS8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5nc3RvcmUvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuaHVwbG9hZC8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5oYWNjZXNzLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2NhbmpmaWxlY29pbi8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5ndXNhZ2UvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZGNhdWRYIu0BNKAZHC60LlK8lyDfh58dNVTT1FOZGlUAVz7/CtgWoktjZXhwGmc6XVJjZmN0gaFlc3BhY2WhZG5hbWVpc3RheS13YXJtY2lzc1gi7QFljp+qERkWaWWfLPqrgpDRuqFWpMRdBjgxgnPKoKs4NGNwcmaAswcBcRIgXK440x3qoeqfC5SWUKC9yiHCOzhyiZUDmxLXNEXkpIWoYXNYRO2hA0CBY6Ff7agjmabfAF78907hizVTbSlvUN8gXtdDU+Hf2royGuHFdoQHaoCk+rwlFCauMpB36k0+dfakV0Yo3wECYXZlMC45LjFjYXR0hqJjY2FuZ3NwYWNlLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2NhbmdzdG9yZS8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkomNjYW5odXBsb2FkLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2NhbmhhY2Nlc3MvKmR3aXRoeDhkaWQ6a2V5Ono2TWttSGhNcVd6aGlzVTF2dnlQQVhocUVZa0p0WnBTV3czWEpSa0FiRDlCSnBGZKJjY2FuamZpbGVjb2luLypkd2l0aHg4ZGlkOmtleTp6Nk1rbUhoTXFXemhpc1UxdnZ5UEFYaHFFWWtKdFpwU1d3M1hKUmtBYkQ5QkpwRmSiY2Nhbmd1c2FnZS8qZHdpdGh4OGRpZDprZXk6ejZNa21IaE1xV3poaXNVMXZ2eVBBWGhxRVlrSnRacFNXdzNYSlJrQWJEOUJKcEZkY2F1ZFgi7QFxf46aJigNoEkDmrxpyXPmYpP22wqm16/gA+b5yj7AHGNleHD2Y2ZjdIGhZXNwYWNloWRuYW1laXN0YXktd2FybWNpc3NYIu0BNKAZHC60LlK8lyDfh58dNVTT1FOZGlUAVz7/CtgWoktjcHJmhtgqWCUAAXESICWlHgYx5Nny6Hgmk3fzmKZ+No7htps8vkGr+ZCl6BZY2CpYJQABcRIgJaUeBjHk2fLoeCaTd/OYpn42juG2mzy+Qav5kKXoFljYKlglAAFxEiAlpR4GMeTZ8uh4JpN385imfjaO4babPL5Bq/mQpegWWNgqWCUAAXESICWlHgYx5Nny6Hgmk3fzmKZ+No7htps8vkGr+ZCl6BZY2CpYJQABcRIgJaUeBjHk2fLoeCaTd/OYpn42juG2mzy+Qav5kKXoFljYKlglAAFxEiAlpR4GMeTZ8uh4JpN385imfjaO4babPL5Bq/mQpegWWA=="

import * as Client from '@web3-storage/w3up-client'
import * as Signer from '@ucanto/principal/ed25519'
import { importDAG } from '@ucanto/core/delegation'
import { CarReader } from '@ipld/car'

 /** @param {string} data Base64 encoded CAR file \*/
 async function parseProof (data) {
  const blocks = []
  const reader = await CarReader.fromBytes(Buffer.from(data, 'base64'))
  for await (const block of reader.blocks()) {
    blocks.push(block)
  }
  return importDAG(blocks)
}
 
export const POST = async ({ request }) => {
  const data = await request.formData()
  const text = await data.get("text")
  const address = await data.get("address")

  if (!text || !address) throw error(422)

  // Load client with specific private key
  const principal = Signer.parse(W3S_KEY)
  const client = await Client.create({ principal, store: new StoreMemory() })
  

  // Add proof that this agent has been delegated capabilities on the space
  const proof = await parseProof(W3S_PROOF)
  const space = await client.addSpace(proof)
  await client.setCurrentSpace(space.did())
  // READY to go!

  // Now upload files

  const file = new File([text], "test.md")

  const result = await client.uploadFile(file)

  if (!result) throw error(500, "Could not upload")

  return new Response(result)
}

export const GET = async () => {
  // List all proposals
  // const 
}
